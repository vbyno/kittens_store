name: kittens-action
on:
  push:
    branches-ignore:
      - master

jobs:
  # ruby_checks:
  #   runs-on: ubuntu-latest

  #   services:
  #     postgres:
  #       image: postgres:13.3
  #       env:
  #         POSTGRES_DB: kittens_store_test
  #         POSTGRES_PORT: 5432
  #         POSTGRES_USER: postgres_user
  #         POSTGRES_PASSWORD: postgres_password
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 5432:5432

  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 2.4.9
  #     - name: install dependencies
  #       run: bundle install --jobs 3 --retry 3
  #     - name: rubocop
  #       run: bundle exec rubocop
  #     - name: rspec
  #       run: sh scripts/test.sh
  #       env:
  #         DATABASE_URL: postgres://postgres_user:postgres_password@localhost:5432/kittens_store_test
  #         RACK_ENV: test

  # push_image:
  #   runs-on: ubuntu-latest
  #   # needs: ruby_checks
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v2
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-west-3
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #     - name: Build, tag, and push image to Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: kittens-store
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #     - name: Lint Helm
  #       run: helm lint ops/deployment
  #     - name: Update kubeconfig
  #       run: aws eks update-kubeconfig --region eu-west-3 --name main_eks_cluster
  #     - name: Get Pods
  #       run: kubectl get pods -A
  #     - name: Deploy to EKS
  #       run: >
  #         helm upgrade kittens ./ops/deployment
  #         --install --wait --atomic --debug
  #         -f=ops/deployment/values.yaml

  infrastructure_plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'ops/infrastructure/live_ci'
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      # - uses: mshick/add-pr-comment@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     message: |
      #       #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${{ env.PLAN }}
      #       \`\`\`

      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*
      #     allow-repeats: true
      - name: Save artifacts
        run: |
          terraform-bin output -raw database_url > ../../deployment/database_url.txt
          terraform-bin output -raw eks_cluster_name > ../../deployment/eks_cluster_name.txt
      - name: Archive database URL and EKS cluster name
        uses: actions/upload-artifact@v2
        with:
          name: terraform-artifacts
          path: |
            ops/deployment/database_url.txt
            ops/deployment/eks_cluster_name.txt
          retention-days: 5
